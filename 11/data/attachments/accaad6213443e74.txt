# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Register Step 1 Valid, Step 2 Handle Has Space)
- Location: /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/registration.test.ts:123:5

# Error details

```
Error: locator.fill: Test timeout of 30000ms exceeded.
Call log:
  - waiting for locator('input.css-11aywtz')

    at /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/registration.test.ts:129:45
```

# Page snapshot

```yaml
- text: Create Account We're so excited to have you join us! Step 2 of 3 Choose your username
- img
- textbox "Type your desired username"
- button "Go back to previous step": Back
- button "Continue to next step" [disabled]: Next
- img
- combobox:
  - option "English" [selected]
  - option "Aragonés – Aragonese"
  - option "Asturianu – Asturian"
  - option "Català – Catalan"
  - option "Cymraeg – Welsh"
  - option "Dansk – Danish"
  - option "Deutsch – German"
  - option "Ελληνικά – Greek"
  - option "English (UK)"
  - option "Esperanto"
  - option "Español – Spanish"
  - option "Euskera – Basque"
  - option "Suomi – Finnish"
  - option "Français – French"
  - option "Gaeilge – Irish"
  - option "Gàidhlig – Scottish Gaelic"
  - option "Galego – Galician"
  - option "हिंदी – Hindi"
  - option "magyar – Hungarian"
  - option "Interlingua"
  - option "Bahasa Indonesia – Indonesian"
  - option "Italiano – Italian"
  - option "日本語 – Japanese"
  - option "ភាសាខ្មែរ – Khmer"
  - option "한국어 – Korean"
  - option "नेपाली – Nepali"
  - option "Nederlands – Dutch"
  - option "Polski – Polish"
  - option "Português (BR) – Portuguese (BR)"
  - option "Română – Romanian"
  - option "Русский – Russian"
  - option "Svenska – Swedish"
  - option "ภาษาไทย – Thai"
  - option "Türkçe – Turkish"
  - option "Українська – Ukrainian"
  - option "Tiếng Việt – Vietnamese"
  - option "简体中文 – Simplified Chinese"
  - option "繁體中文 – Traditional Chinese"
  - option "粵文 – Cantonese"
- text: Having trouble?
- link "Contact support"
```

# Test source

```ts
   29 |
   30 | test('Register With Only Email (invalid)', async ({ page }) => {
   31 |     await page.getByTestId('emailInput').click(); // Click the email input field
   32 |     await page.getByTestId('emailInput').fill('test'); // Fill the email field
   33 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
   34 |     const ExpectedText = 'Your email appears to be invalid.';
   35 |     const LocatorText = page.getByText(ExpectedText);
   36 |     await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
   37 | })
   38 |
   39 | test('Register With Valid Email, Short Password)', async ({ page }) => {
   40 |     await page.getByTestId('emailInput').click(); // Click the email input field
   41 |     await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
   42 |     await page.getByTestId('passwordInput').click(); // Click the password input field
   43 |     await page.getByTestId('passwordInput').fill('123456'); // Fill the password with 7 characters (minimum is 8)
   44 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
   45 |     const ExpectedText = 'Your password must be at least 8 characters long.';
   46 |     const LocatorText = page.getByText(ExpectedText);
   47 |     await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
   48 | })
   49 |
   50 | test('Register With Valid Email, Good Password)', async ({ page }) => {
   51 |     await page.getByTestId('emailInput').click(); // Click the email input field
   52 |     await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
   53 |     await page.getByTestId('passwordInput').click(); // Click the password input field
   54 |     await page.getByTestId('passwordInput').fill('123456'); // Fill the password with 7 characters (minimum is 8)
   55 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
   56 |     const ExpectedText = 'Your password must be at least 8 characters long.';
   57 |     const LocatorText = page.getByText(ExpectedText);
   58 |     await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
   59 | })
   60 |
   61 | test('Register With Birth Date Under 13 Years)', async ({ browserName, page }) => {
   62 |     const today = new Date();
   63 |     await page.getByTestId('date').click(); // Click the birth date input field
   64 |     if(browserName.toLowerCase() !== 'webkit')
   65 |     {
   66 |         await page.getByTestId('date').pressSequentially(today.toLocaleDateString('en-us'));
   67 |     }
   68 |     else
   69 |     {
   70 |         await page.getByTestId('date').fill(today.toLocaleDateString('en-us'));
   71 |     }
   72 |     const ExpectedText = 'You must be 13 years of age or older to create an account.';
   73 |     const LocatorText = page.getByText(ExpectedText);
   74 |     await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
   75 | })
   76 |
   77 | test('Register Step 1 Valid)', async ({ page }) => {
   78 |     await page.getByTestId('emailInput').click(); // Click the email input field
   79 |     await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
   80 |     await page.getByTestId('passwordInput').click(); // Click the password input field
   81 |     await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
   82 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
   83 |     const Placeholder = await page.locator("input.css-11aywtz").getAttribute("placeholder"); // Locator is placed on the input box for the handle
   84 |     await expect(Placeholder).toEqual("Type your desired username"); // Find the text dispalyed for step 2
   85 | })
   86 |
   87 | test('Register Step 1 Valid, Step 2 No Value)', async ({ page }) => {
   88 |     await page.getByTestId('emailInput').click(); // Click the email input field
   89 |     await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
   90 |     await page.getByTestId('passwordInput').click(); // Click the password input field
   91 |     await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
   92 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
   93 |     const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
   94 |     await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without inputting text
   95 | })
   96 |
   97 | test('Register Step 1 Valid, Step 2 Handle Already Taken)', async ({ page }) => {
   98 |     await page.getByTestId('emailInput').click(); // Click the email input field
   99 |     await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
  100 |     await page.getByTestId('passwordInput').click(); // Click the password input field
  101 |     await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
  102 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
  103 |     await page.locator("input.css-11aywtz").fill(BSKY_HANDLE); // Locator is placed on the input box for the handle
  104 |     await page.getByRole('button', {name: 'Next'}).click(); // Click the next button to trigger an attempt at completeing step 2
  105 |     const ExpectedText = 'That handle is already taken.';
  106 |     const LocatorText = page.getByText(ExpectedText);
  107 |     await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
  108 | })
  109 |
  110 | test('Register Step 1 Valid, Step 2 Handle Less Than 3 Characters)', async ({ page }) => {
  111 |     await page.getByTestId('emailInput').click(); // Click the email input field
  112 |     await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
  113 |     await page.getByTestId('passwordInput').click(); // Click the password input field
  114 |     await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
  115 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
  116 |     await page.locator("input.css-11aywtz").fill("12"); // Locator is placed on the input box for the handle
  117 |     const dAttributeValue = await page.locator('path').nth(2).getAttribute("d") // This locator points to the SVG object for "At least 3 characters" requirement
  118 |     await expect(dAttributeValue).toEqual(DID_NOT_MEET_REQUIREMENT_D_VALUE); // Find the error message and then assert on it
  119 |     const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
  120 |     await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without correct handle size
  121 | })
  122 |
  123 | test('Register Step 1 Valid, Step 2 Handle Has Space)', async ({ page }) => {
  124 |     await page.getByTestId('emailInput').click(); // Click the email input field
  125 |     await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
  126 |     await page.getByTestId('passwordInput').click(); // Click the password input field
  127 |     await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
  128 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
> 129 |     await page.locator("input.css-11aywtz").fill("1234 "); // Locator is placed on the input box for the handle
      |                                             ^ Error: locator.fill: Test timeout of 30000ms exceeded.
  130 |     const dAttributeValue = await page.locator('path').nth(1).getAttribute("d") // This locator points to the SVG object for "Only contains letters, numbers, and hyphens" requirement
  131 |     await expect(dAttributeValue).toEqual(DID_NOT_MEET_REQUIREMENT_D_VALUE); // Find the error message and then assert on it
  132 |     const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
  133 |     await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without correct handle types
  134 | })
  135 |
  136 | test('Register Step 1 Valid, Step 2 Handle Over 18 Characters)', async ({ page }) => {
  137 |     await page.getByTestId('emailInput').click(); // Click the email input field
  138 |     await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
  139 |     await page.getByTestId('passwordInput').click(); // Click the password input field
  140 |     await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
  141 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
  142 |     await page.locator("input.css-11aywtz").fill("aaaaaaaaaaaaaaaaaaa"); // Locator is placed on the input box for the handle
  143 |     const dAttributeValue = await page.locator('path').nth(2).getAttribute("d") // This locator points to the SVG object for "No longer than 18 characters" requirement
  144 |     await expect(dAttributeValue).toEqual(DID_NOT_MEET_REQUIREMENT_D_VALUE); // Find the error message and then assert on it
  145 |     const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
  146 |     await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without correct handle size
  147 | })
  148 |
  149 | test('Register Step 1 Valid, Step 2 Good Handle)', async ({ page }) => {
  150 |     await page.getByTestId('emailInput').click(); // Click the email input field
  151 |     await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
  152 |     await page.getByTestId('passwordInput').click(); // Click the password input field
  153 |     await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
  154 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
  155 |     await page.locator("input.css-11aywtz").fill(GOOD_HANDLE); // Locator is placed on the input box for the handle
  156 |     await page.getByRole('button', {name: 'Next'}).click(); // Click the next button to trigger an attempt at registering
  157 |     const ExpectedText = "Complete the challenge";
  158 |     const LocatorText = page.getByText(ExpectedText);
  159 |     await expect(LocatorText).toHaveText(ExpectedText); // Find Next button should not be enabled without correct handle size
  160 | })
  161 |
```

# Local changes

```diff
diff --git a/__tests__/lib/Playwright/login-validation.test.ts b/__tests__/lib/Playwright/login-validation.test.ts
new file mode 100644
index 000000000..4ff5c139b
--- /dev/null
+++ b/__tests__/lib/Playwright/login-validation.test.ts
@@ -0,0 +1,58 @@
+import { test, expect, type Page } from '@playwright/test';
+
+const BLUESKY_WEB_URL = "https://bsky.app/";
+const BSKY_EMAIL = "cis565bskytests@gmail.com"; // TODO: Make these secret in GitHub
+const BSKY_PASS = "CIS565TestGroup"; // TODO: Make these secret in GitHub
+
+
+test.beforeEach(async ({ page }) => {
+    await page.goto(BLUESKY_WEB_URL);
+    await page.getByRole('button', {name: 'Sign in'}).click(); // Click Sign in button
+});
+
+test('Login Only Email Filled', async ({ page }) => {
+    await page.getByTestId('loginUsernameInput').click(); // Click the username input field
+    await page.getByTestId('loginUsernameInput').fill('test@gmail.com'); // Fill the username field
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger a login attempt
+    const TextLocator = page.getByText('Please enter your password');
+    await expect(TextLocator).toHaveText('Please enter your password'); // Find the error message and then assert on it
+});
+
+test('Login Only Password Filled', async ({ page }) => {
+    await page.getByTestId('loginPasswordInput').click(); // Click the password input field
+    await page.getByTestId('loginPasswordInput').fill('password'); // Find the error message and then assert on it
+
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger a login attempt
+    const TextLocator = page.getByText('Please enter your username');
+    await expect(TextLocator).toHaveText('Please enter your username'); // Find the error message and then assert on it
+});
+
+test('Login Bad Email Bad Password', async ({ page }) => {
+    await page.getByTestId('loginUsernameInput').click(); // Click the username input field
+    await page.getByTestId('loginUsernameInput').fill('test'); // Fill the username field
+
+    await page.getByTestId('loginPasswordInput').click(); // Click the password input field
+    await page.getByTestId('loginPasswordInput').fill('password'); // Find the error message and then assert on it
+
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger a login attempt
+    const TextLocator = page.getByText('Incorrect username or password');
+    await expect(TextLocator).toHaveText('Incorrect username or password'); // Find the error message and then assert on it
+});
+
+test('Forgot Password Login', async ({ page }) => {
+    await page.getByText('Forgot?').click(); // Click Forgot? button
+    const TextLocator = page.getByText('Enter the email you used to create your account. We\'ll send you a "reset code" so you can set a new password.');
+    await expect(TextLocator).toHaveText('Enter the email you used to create your account. We\'ll send you a "reset code" so you can set a new password.'); // Find the descriptor and assert on it
+});
+
+test('Successful Login', async ({ page }) => {
+    await page.getByTestId('loginUsernameInput').click(); // Click the username input field
+    await page.getByTestId('loginUsernameInput').fill(BSKY_EMAIL); // Fill the username field
+
+    await page.getByTestId('loginPasswordInput').click(); // Click the password input field
+    await page.getByTestId('loginPasswordInput').fill(BSKY_PASS); // Find the error message and then assert on it
+
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger a login attempt
+    page.getByRole('link', { name: 'Profile', exact: true }).click()
+    await expect(page).toHaveURL(BLUESKY_WEB_URL + "profile/cis565testgroup.bsky.social") // Check the URL after login
+});
diff --git a/__tests__/lib/Playwright/registration.test.ts b/__tests__/lib/Playwright/registration.test.ts
new file mode 100644
index 000000000..a7b57a0a0
--- /dev/null
+++ b/__tests__/lib/Playwright/registration.test.ts
@@ -0,0 +1,160 @@
+import { test, expect, type Page } from '@playwright/test';
+
+const BLUESKY_WEB_URL = "http://localhost:19006/"; // TODO: We should build a local version of bluesky. This way changes in the wroking repo can be tested
+const BSKY_HANDLE = "CIS565TestGroup"; // TODO: Make these secret in GitHub
+const GOOD_HANDLE = "12345--AFbth-wSDFe"
+
+const DID_NOT_MEET_REQUIREMENT_D_VALUE = "M4.293 4.293a1 1 0 0 1 1.414 0L12 10.586l6.293-6.293a1 1 0 1 1 1.414 1.414L13.414 12l6.293 6.293a1 1 0 0 1-1.414 1.414L12 13.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L10.586 12 4.293 5.707a1 1 0 0 1 0-1.414Z"
+
+test.beforeEach(async ({ page }) => {
+    await page.goto(BLUESKY_WEB_URL);
+    await page.getByRole('button', {name: 'Create Account'}).click(); // Click Sign in button
+});
+
+test('Register With No Credentials', async ({ page }) => {
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const ExpectedText = 'Please enter your email.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register With Only Email (valid)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const ExpectedText = 'Please choose your password.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register With Only Email (invalid)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test'); // Fill the email field
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const ExpectedText = 'Your email appears to be invalid.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register With Valid Email, Short Password)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('123456'); // Fill the password with 7 characters (minimum is 8)
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const ExpectedText = 'Your password must be at least 8 characters long.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register With Valid Email, Good Password)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('123456'); // Fill the password with 7 characters (minimum is 8)
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const ExpectedText = 'Your password must be at least 8 characters long.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register With Birth Date Under 13 Years)', async ({ browserName, page }) => {
+    const today = new Date();
+    await page.getByTestId('date').click(); // Click the birth date input field
+    if(browserName.toLowerCase() !== 'webkit')
+    {
+        await page.getByTestId('date').pressSequentially(today.toLocaleDateString('en-us'));
+    }
+    else
+    {
+        await page.getByTestId('date').fill(today.toLocaleDateString('en-us'));
+    }
+    const ExpectedText = 'You must be 13 years of age or older to create an account.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register Step 1 Valid)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const Placeholder = await page.locator("input.css-11aywtz").getAttribute("placeholder"); // Locator is placed on the input box for the handle
+    await expect(Placeholder).toEqual("Type your desired username"); // Find the text dispalyed for step 2
+})
+
+test('Register Step 1 Valid, Step 2 No Value)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
+    await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without inputting text
+})
+
+test('Register Step 1 Valid, Step 2 Handle Already Taken)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
+    await page.locator("input.css-11aywtz").fill(BSKY_HANDLE); // Locator is placed on the input box for the handle
+    await page.getByRole('button', {name: 'Next'}).click(); // Click the next button to trigger an attempt at completeing step 2
+    const ExpectedText = 'That handle is already taken.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register Step 1 Valid, Step 2 Handle Less Than 3 Characters)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
+    await page.locator("input.css-11aywtz").fill("12"); // Locator is placed on the input box for the handle
+    const dAttributeValue = await page.locator('path').nth(2).getAttribute("d") // This locator points to the SVG object for "At least 3 characters" requirement
+    await expect(dAttributeValue).toEqual(DID_NOT_MEET_REQUIREMENT_D_VALUE); // Find the error message and then assert on it
+    const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
+    await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without correct handle size
+})
+
+test('Register Step 1 Valid, Step 2 Handle Has Space)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
+    await page.locator("input.css-11aywtz").fill("1234 "); // Locator is placed on the input box for the handle
+    const dAttributeValue = await page.locator('path').nth(1).getAttribute("d") // This locator points to the SVG object for "Only contains letters, numbers, and hyphens" requirement
+    await expect(dAttributeValue).toEqual(DID_NOT_MEET_REQUIREMENT_D_VALUE); // Find the error message and then assert on it
+    const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
+    await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without correct handle types
+})
+
+test('Register Step 1 Valid, Step 2 Handle Over 18 Characters)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
+    await page.locator("input.css-11aywtz").fill("aaaaaaaaaaaaaaaaaaa"); // Locator is placed on the input box for the handle
+    const dAttributeValue = await page.locator('path').nth(2).getAttribute("d") // This locator points to the SVG object for "No longer than 18 characters" requirement
+    await expect(dAttributeValue).toEqual(DID_NOT_MEET_REQUIREMENT_D_VALUE); // Find the error message and then assert on it
+    const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
+    await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without correct handle size
+})
+
+test('Register Step 1 Valid, Step 2 Good Handle)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
+    await page.locator("input.css-11aywtz").fill(GOOD_HANDLE); // Locator is placed on the input box for the handle
+    await page.getByRole('button', {name: 'Next'}).click(); // Click the next button to trigger an attempt at registering
+    const ExpectedText = "Complete the challenge";
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find Next button should not be enabled without correct handle size
+})
```