# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Successful Login
- Location: /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/login-validation.test.ts:48:5

# Error details

```
Error: locator.click: Test ended.
Call log:
  - waiting for getByRole('link', { name: 'Profile', exact: true })

    at /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/login-validation.test.ts:56:62
```

# Page snapshot

```yaml
- text: Sign in Enter your username and password Hosting provider
- button "Bluesky Social":
  - img
  - text: Bluesky Social
  - img
- text: Account
- img
- textbox "Username or email address": "${BSKY_EMAIL}"
- img
- textbox "Password": "${BSKY_PASS}"
- button "Forgot password?": Forgot?
- img
- text: Incorrect username or password
- button "Back"
- button "Next"
```

# Test source

```ts
   1 | import { test, expect, type Page } from '@playwright/test';
   2 |
   3 | const BLUESKY_WEB_URL = "http://localhost:19006/";
   4 | const BSKY_EMAIL = process.env.BS_USERNAME; // TODO: Make these secret in GitHub
   5 | const BSKY_PASS = process.env.BS_PASSWORD; // TODO: Make these secret in GitHub
   6 |
   7 |
   8 | test.beforeEach(async ({ page }) => {
   9 |     await page.goto(BLUESKY_WEB_URL);
  10 |     await page.getByRole('button', {name: 'Sign in'}).click(); // Click Sign in button
  11 | });
  12 |
  13 | test('Login Only Email Filled', async ({ page }) => {
  14 |     await page.getByTestId('loginUsernameInput').click(); // Click the username input field
  15 |     await page.getByTestId('loginUsernameInput').fill('test@gmail.com'); // Fill the username field
  16 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger a login attempt
  17 |     const TextLocator = page.getByText('Please enter your password');
  18 |     await expect(TextLocator).toHaveText('Please enter your password'); // Find the error message and then assert on it
  19 | });
  20 |
  21 | test('Login Only Password Filled', async ({ page }) => {
  22 |     await page.getByTestId('loginPasswordInput').click(); // Click the password input field
  23 |     await page.getByTestId('loginPasswordInput').fill('password'); // Find the error message and then assert on it
  24 |
  25 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger a login attempt
  26 |     const TextLocator = page.getByText('Please enter your username');
  27 |     await expect(TextLocator).toHaveText('Please enter your username'); // Find the error message and then assert on it
  28 | });
  29 |
  30 | test('Login Bad Email Bad Password', async ({ page }) => {
  31 |     await page.getByTestId('loginUsernameInput').click(); // Click the username input field
  32 |     await page.getByTestId('loginUsernameInput').fill('test'); // Fill the username field
  33 |
  34 |     await page.getByTestId('loginPasswordInput').click(); // Click the password input field
  35 |     await page.getByTestId('loginPasswordInput').fill('password'); // Find the error message and then assert on it
  36 |
  37 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger a login attempt
  38 |     const TextLocator = page.getByText('Incorrect username or password');
  39 |     await expect(TextLocator).toHaveText('Incorrect username or password'); // Find the error message and then assert on it
  40 | });
  41 |
  42 | test('Forgot Password Login', async ({ page }) => {
  43 |     await page.getByText('Forgot?').click(); // Click Forgot? button
  44 |     const TextLocator = page.getByText('Enter the email you used to create your account. We\'ll send you a "reset code" so you can set a new password.');
  45 |     await expect(TextLocator).toHaveText('Enter the email you used to create your account. We\'ll send you a "reset code" so you can set a new password.'); // Find the descriptor and assert on it
  46 | });
  47 |
  48 | test('Successful Login', async ({ page }) => {
  49 |     await page.getByTestId('loginUsernameInput').click(); // Click the username input field
  50 |     await page.getByTestId('loginUsernameInput').fill('${BSKY_EMAIL}'); // Fill the username field
  51 |
  52 |     await page.getByTestId('loginPasswordInput').click(); // Click the password input field
  53 |     await page.getByTestId('loginPasswordInput').fill('${BSKY_PASS}'); // Find the error message and then assert on it
  54 |
  55 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger a login attempt
> 56 |     page.getByRole('link', { name: 'Profile', exact: true }).click()
     |                                                              ^ Error: locator.click: Test ended.
  57 |     await expect(page).toHaveURL(BLUESKY_WEB_URL + "profile/cis565testgroup.bsky.social") // Check the URL after login
  58 | });
  59 |
```

# Local changes

```diff
diff --git a/__tests__/lib/Playwright/login-validation.test.ts b/__tests__/lib/Playwright/login-validation.test.ts
new file mode 100644
index 000000000..7d2022745
--- /dev/null
+++ b/__tests__/lib/Playwright/login-validation.test.ts
@@ -0,0 +1,58 @@
+import { test, expect, type Page } from '@playwright/test';
+
+const BLUESKY_WEB_URL = "http://localhost:19006/";
+const BSKY_EMAIL = process.env.BS_USERNAME; // TODO: Make these secret in GitHub
+const BSKY_PASS = process.env.BS_PASSWORD; // TODO: Make these secret in GitHub
+
+
+test.beforeEach(async ({ page }) => {
+    await page.goto(BLUESKY_WEB_URL);
+    await page.getByRole('button', {name: 'Sign in'}).click(); // Click Sign in button
+});
+
+test('Login Only Email Filled', async ({ page }) => {
+    await page.getByTestId('loginUsernameInput').click(); // Click the username input field
+    await page.getByTestId('loginUsernameInput').fill('test@gmail.com'); // Fill the username field
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger a login attempt
+    const TextLocator = page.getByText('Please enter your password');
+    await expect(TextLocator).toHaveText('Please enter your password'); // Find the error message and then assert on it
+});
+
+test('Login Only Password Filled', async ({ page }) => {
+    await page.getByTestId('loginPasswordInput').click(); // Click the password input field
+    await page.getByTestId('loginPasswordInput').fill('password'); // Find the error message and then assert on it
+
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger a login attempt
+    const TextLocator = page.getByText('Please enter your username');
+    await expect(TextLocator).toHaveText('Please enter your username'); // Find the error message and then assert on it
+});
+
+test('Login Bad Email Bad Password', async ({ page }) => {
+    await page.getByTestId('loginUsernameInput').click(); // Click the username input field
+    await page.getByTestId('loginUsernameInput').fill('test'); // Fill the username field
+
+    await page.getByTestId('loginPasswordInput').click(); // Click the password input field
+    await page.getByTestId('loginPasswordInput').fill('password'); // Find the error message and then assert on it
+
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger a login attempt
+    const TextLocator = page.getByText('Incorrect username or password');
+    await expect(TextLocator).toHaveText('Incorrect username or password'); // Find the error message and then assert on it
+});
+
+test('Forgot Password Login', async ({ page }) => {
+    await page.getByText('Forgot?').click(); // Click Forgot? button
+    const TextLocator = page.getByText('Enter the email you used to create your account. We\'ll send you a "reset code" so you can set a new password.');
+    await expect(TextLocator).toHaveText('Enter the email you used to create your account. We\'ll send you a "reset code" so you can set a new password.'); // Find the descriptor and assert on it
+});
+
+test('Successful Login', async ({ page }) => {
+    await page.getByTestId('loginUsernameInput').click(); // Click the username input field
+    await page.getByTestId('loginUsernameInput').fill('${BSKY_EMAIL}'); // Fill the username field
+
+    await page.getByTestId('loginPasswordInput').click(); // Click the password input field
+    await page.getByTestId('loginPasswordInput').fill('${BSKY_PASS}'); // Find the error message and then assert on it
+
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger a login attempt
+    page.getByRole('link', { name: 'Profile', exact: true }).click()
+    await expect(page).toHaveURL(BLUESKY_WEB_URL + "profile/cis565testgroup.bsky.social") // Check the URL after login
+});
diff --git a/__tests__/lib/Playwright/registration.test.ts b/__tests__/lib/Playwright/registration.test.ts
new file mode 100644
index 000000000..977b2a494
--- /dev/null
+++ b/__tests__/lib/Playwright/registration.test.ts
@@ -0,0 +1,149 @@
+import { test, expect, type Page } from '@playwright/test';
+
+const BLUESKY_WEB_URL = "http://localhost:19006/"; // TODO: We should build a local version of bluesky. This way changes in the wroking repo can be tested
+const BSKY_HANDLE = "CIS565TestGroup"; // TODO: Make these secret in GitHub
+const GOOD_HANDLE = "12345--AFbth-wSDFe"
+
+const DID_NOT_MEET_REQUIREMENT_D_VALUE = "M4.293 4.293a1 1 0 0 1 1.414 0L12 10.586l6.293-6.293a1 1 0 1 1 1.414 1.414L13.414 12l6.293 6.293a1 1 0 0 1-1.414 1.414L12 13.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L10.586 12 4.293 5.707a1 1 0 0 1 0-1.414Z"
+
+test.beforeEach(async ({ page }) => {
+    await page.goto(BLUESKY_WEB_URL);
+    await page.getByRole('button', {name: 'Create Account'}).click(); // Click Sign in button
+});
+
+test('Register With No Credentials', async ({ page }) => {
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const ExpectedText = 'Please enter your email.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register With Only Email (valid)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const ExpectedText = 'Please choose your password.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register With Only Email (invalid)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test'); // Fill the email field
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const ExpectedText = 'Your email appears to be invalid.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register With Valid Email, Short Password', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('123456'); // Fill the password with 7 characters (minimum is 8)
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const ExpectedText = 'Your password must be at least 8 characters long.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register With Birth Date Under 13 Years', async ({ browserName, page }) => {
+    const today = new Date();
+    await page.getByTestId('date').click(); // Click the birth date input field
+    if(browserName.toLowerCase() !== 'webkit')
+    {
+        await page.getByTestId('date').pressSequentially(today.toLocaleDateString('en-us'));
+    }
+    else
+    {
+        await page.getByTestId('date').fill(today.toLocaleDateString('en-us'));
+    }
+    const ExpectedText = 'You must be 13 years of age or older to create an account.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register Step 1 Valid', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const Placeholder = await page.locator("input.css-11aywtz").getAttribute("placeholder"); // Locator is placed on the input box for the handle
+    await expect(Placeholder).toEqual("Type your desired username"); // Find the text dispalyed for step 2
+})
+
+test('Register Step 1 Valid, Step 2 No Value', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
+    await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without inputting text
+})
+
+test('Register Step 1 Valid, Step 2 Handle Already Taken', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
+    await page.locator("input.css-11aywtz").fill(BSKY_HANDLE); // Locator is placed on the input box for the handle
+    await page.getByRole('button', {name: 'Next'}).click(); // Click the next button to trigger an attempt at completeing step 2
+    const ExpectedText = 'That handle is already taken.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register Step 1 Valid, Step 2 Handle Less Than 3 Characters', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
+    await page.locator("input.css-11aywtz").fill("12"); // Locator is placed on the input box for the handle
+    const dAttributeValue = await page.locator('path').nth(2).getAttribute("d") // This locator points to the SVG object for "At least 3 characters" requirement
+    await expect(dAttributeValue).toEqual(DID_NOT_MEET_REQUIREMENT_D_VALUE); // Find the error message and then assert on it
+    const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
+    await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without correct handle size
+})
+
+test('Register Step 1 Valid, Step 2 Handle Has Space)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
+    await page.locator("input.css-11aywtz").fill("1234 "); // Locator is placed on the input box for the handle
+    const dAttributeValue = await page.locator('path').nth(1).getAttribute("d") // This locator points to the SVG object for "Only contains letters, numbers, and hyphens" requirement
+    await expect(dAttributeValue).toEqual(DID_NOT_MEET_REQUIREMENT_D_VALUE); // Find the error message and then assert on it
+    const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
+    await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without correct handle types
+})
+
+test('Register Step 1 Valid, Step 2 Handle Over 18 Characters)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
+    await page.locator("input.css-11aywtz").fill("aaaaaaaaaaaaaaaaaaa"); // Locator is placed on the input box for the handle
+    const dAttributeValue = await page.locator('path').nth(2).getAttribute("d") // This locator points to the SVG object for "No longer than 18 characters" requirement
+    await expect(dAttributeValue).toEqual(DID_NOT_MEET_REQUIREMENT_D_VALUE); // Find the error message and then assert on it
+    const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
+    await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without correct handle size
+})
+
+test('Register Step 1 Valid, Step 2 Good Handle)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
+    await page.locator("input.css-11aywtz").fill(GOOD_HANDLE); // Locator is placed on the input box for the handle
+    await page.getByRole('button', {name: 'Next'}).click(); // Click the next button to trigger an attempt at registering
+    const ExpectedText = "Complete the challenge";
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Expect step 3 which is the captcha challenge
+})
```