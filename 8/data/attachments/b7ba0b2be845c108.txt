# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: user can follow and unfollow mercytum
- Location: /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/FollowingPage.test.ts:3:5

# Error details

```
Error: locator.click: Test timeout of 30000ms exceeded.
Call log:
  - waiting for getByTestId('followBtn')

    at /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/FollowingPage.test.ts:27:39
```

# Page snapshot

```yaml
- main:
  - button "Back":
    - img
  - button "Unfollow mercytum.bsky.social":
    - img
    - text: Following
  - button "More options":
    - img
  - text: Mercy Tum @mercytum.bsky.social
  - link "3 followers"
  - link "1 following"
  - text: 1 post
  - img "View mercytum.bsky.social's avatar"
  - tablist:
    - tab "Posts"
    - tab "Replies"
    - tab "Media"
    - tab "Videos"
  - link "Mercy Tum's avatar View profileView profile · April 6, 2025 at 7:09 PM Hashtag Playwright is an amazing e2e Hashtag software Hashtag testing tool! Reply (0 replies) Repost or quote post Like (0 likes) Open post options menu":
    - link "Mercy Tum's avatar"
    - link "View profile": ‪Mercy Tum‬
    - link "View profile": ‪@mercytum.bsky.social‬
    - text: ·
    - link "April 6, 2025 at 7:09 PM": 5d
    - link "Hashtag Playwright": "#Playwright"
    - text: is an amazing e2e
    - link "Hashtag software": "#software"
    - link "Hashtag testing": "#testing"
    - text: tool!
    - button "Reply (0 replies)":
      - img
    - button "Repost or quote post":
      - img
    - button "Like (0 likes)":
      - img
    - button "Open post options menu":
      - img
  - text: End of feed
  - button "New post":
    - img
- navigation:
  - button "Switch accounts"
  - link "Home"
  - link "Explore"
  - link "Notifications": "1"
  - link "Chat"
  - link "Feeds"
  - link "Lists"
  - link "Profile"
  - link "Settings"
- img
- search "Search"
- link "Discover"
- link "Following"
- link "More feeds"
- img
- text: Trending
- button "Hide trending topics":
  - img
- link "Browse topic Khalil Case": Khalil Case
- link "Browse topic Abrego Garcia": Abrego Garcia
- link "Browse topic DOJ": DOJ
- link "Browse topic Letterboxd": Letterboxd
- link "Browse topic Canucks": Canucks
- link "Browse topic Supreme Court": Supreme Court
- link "Feedback"
- text: •
- link "Privacy"
- text: •
- link "Terms"
- text: •
- link "Help"
```

# Test source

```ts
   1 | import {expect, test} from '@playwright/test'
   2 |
   3 | test('user can follow and unfollow mercytum', async ({page}) => {
   4 |   //Go to site and Login
   5 |   await page.goto('http://localhost:19006/')
   6 |   // await page.goto('https://bsky.app/')
   7 |   await page.getByRole('button', {name: 'Sign in'}).click()
   8 |   await page.getByTestId('loginUsernameInput').click()
   9 |   await page.getByTestId('loginUsernameInput').fill('cis565bskytests@gmail.com')
  10 |   await page.getByTestId('loginPasswordInput').click()
  11 |   await page.getByTestId('loginPasswordInput').fill('CIS565TestGroup')
  12 |   await page.getByTestId('loginNextButton').click()
  13 |
  14 |   //Confirm Login was successful
  15 |   await expect(page.getByTestId('homeScreenFeedTabs-Following')).toBeVisible()
  16 |
  17 |   //Search for user(mercytum)
  18 |   await page.getByRole('search', {name: 'Search'}).click()
  19 |   await page.getByRole('search', {name: 'Search'}).fill('mercytum')
  20 |   await page.getByRole('search', {name: 'Search'}).press('Enter')
  21 |
  22 |   //Go to People tab and select the user
  23 |   await page.getByTestId('undefined-selector-2').getByText('People').click()
  24 |   await page.getByRole('link', {name: 'mercytum.bsky.social'}).click()
  25 |
  26 |   //Follow the user
> 27 |   await page.getByTestId('followBtn').click()
     |                                       ^ Error: locator.click: Test timeout of 30000ms exceeded.
  28 |
  29 |   // Expect to see the "Unfollow" button now
  30 |   await expect(page.getByTestId('unfollowBtn')).toBeVisible()
  31 |
  32 |   //Navigate back Home
  33 |   await page.getByRole('link', {name: 'Home', exact: true}).click()
  34 |
  35 |   //Check if user is in your Following list
  36 |   await page.getByTestId('homeScreenFeedTabs-Following').click()
  37 |   // await page.goto('http://localhost:19006/')
  38 |   // await page.goto('https://bsky.app/')
  39 |   await page.locator('a').filter({hasText: '‪Mercy Tum‬'}).click()
  40 |
  41 |   //Unfollow user
  42 |   await page.getByTestId('unfollowBtn').click()
  43 |   await page.getByRole('link', {name: 'Home', exact: true}).click()
  44 | })
  45 |
```

# Local changes

```diff
diff --git a/__tests__/lib/Playwright/login-validation.test.ts b/__tests__/lib/Playwright/login-validation.test.ts
new file mode 100644
index 000000000..4ff5c139b
--- /dev/null
+++ b/__tests__/lib/Playwright/login-validation.test.ts
@@ -0,0 +1,58 @@
+import { test, expect, type Page } from '@playwright/test';
+
+const BLUESKY_WEB_URL = "https://bsky.app/";
+const BSKY_EMAIL = "cis565bskytests@gmail.com"; // TODO: Make these secret in GitHub
+const BSKY_PASS = "CIS565TestGroup"; // TODO: Make these secret in GitHub
+
+
+test.beforeEach(async ({ page }) => {
+    await page.goto(BLUESKY_WEB_URL);
+    await page.getByRole('button', {name: 'Sign in'}).click(); // Click Sign in button
+});
+
+test('Login Only Email Filled', async ({ page }) => {
+    await page.getByTestId('loginUsernameInput').click(); // Click the username input field
+    await page.getByTestId('loginUsernameInput').fill('test@gmail.com'); // Fill the username field
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger a login attempt
+    const TextLocator = page.getByText('Please enter your password');
+    await expect(TextLocator).toHaveText('Please enter your password'); // Find the error message and then assert on it
+});
+
+test('Login Only Password Filled', async ({ page }) => {
+    await page.getByTestId('loginPasswordInput').click(); // Click the password input field
+    await page.getByTestId('loginPasswordInput').fill('password'); // Find the error message and then assert on it
+
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger a login attempt
+    const TextLocator = page.getByText('Please enter your username');
+    await expect(TextLocator).toHaveText('Please enter your username'); // Find the error message and then assert on it
+});
+
+test('Login Bad Email Bad Password', async ({ page }) => {
+    await page.getByTestId('loginUsernameInput').click(); // Click the username input field
+    await page.getByTestId('loginUsernameInput').fill('test'); // Fill the username field
+
+    await page.getByTestId('loginPasswordInput').click(); // Click the password input field
+    await page.getByTestId('loginPasswordInput').fill('password'); // Find the error message and then assert on it
+
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger a login attempt
+    const TextLocator = page.getByText('Incorrect username or password');
+    await expect(TextLocator).toHaveText('Incorrect username or password'); // Find the error message and then assert on it
+});
+
+test('Forgot Password Login', async ({ page }) => {
+    await page.getByText('Forgot?').click(); // Click Forgot? button
+    const TextLocator = page.getByText('Enter the email you used to create your account. We\'ll send you a "reset code" so you can set a new password.');
+    await expect(TextLocator).toHaveText('Enter the email you used to create your account. We\'ll send you a "reset code" so you can set a new password.'); // Find the descriptor and assert on it
+});
+
+test('Successful Login', async ({ page }) => {
+    await page.getByTestId('loginUsernameInput').click(); // Click the username input field
+    await page.getByTestId('loginUsernameInput').fill(BSKY_EMAIL); // Fill the username field
+
+    await page.getByTestId('loginPasswordInput').click(); // Click the password input field
+    await page.getByTestId('loginPasswordInput').fill(BSKY_PASS); // Find the error message and then assert on it
+
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger a login attempt
+    page.getByRole('link', { name: 'Profile', exact: true }).click()
+    await expect(page).toHaveURL(BLUESKY_WEB_URL + "profile/cis565testgroup.bsky.social") // Check the URL after login
+});
diff --git a/__tests__/lib/Playwright/registration.test.ts b/__tests__/lib/Playwright/registration.test.ts
new file mode 100644
index 000000000..5e99aaa3e
--- /dev/null
+++ b/__tests__/lib/Playwright/registration.test.ts
@@ -0,0 +1,160 @@
+import { test, expect, type Page } from '@playwright/test';
+
+const BLUESKY_WEB_URL = "https://bsky.app/"; // TODO: We should build a local version of bluesky. This way changes in the wroking repo can be tested
+const BSKY_HANDLE = "CIS565TestGroup"; // TODO: Make these secret in GitHub
+const GOOD_HANDLE = "12345--AFbth-wSDFe"
+
+const DID_NOT_MEET_REQUIREMENT_D_VALUE = "M4.293 4.293a1 1 0 0 1 1.414 0L12 10.586l6.293-6.293a1 1 0 1 1 1.414 1.414L13.414 12l6.293 6.293a1 1 0 0 1-1.414 1.414L12 13.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L10.586 12 4.293 5.707a1 1 0 0 1 0-1.414Z"
+
+test.beforeEach(async ({ page }) => {
+    await page.goto(BLUESKY_WEB_URL);
+    await page.getByRole('button', {name: 'Create Account'}).click(); // Click Sign in button
+});
+
+test('Register With No Credentials', async ({ page }) => {
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const ExpectedText = 'Please enter your email.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register With Only Email (valid)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const ExpectedText = 'Please choose your password.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register With Only Email (invalid)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test'); // Fill the email field
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const ExpectedText = 'Your email appears to be invalid.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register With Valid Email, Short Password)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('123456'); // Fill the password with 7 characters (minimum is 8)
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const ExpectedText = 'Your password must be at least 8 characters long.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register With Valid Email, Good Password)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('123456'); // Fill the password with 7 characters (minimum is 8)
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const ExpectedText = 'Your password must be at least 8 characters long.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register With Birth Date Under 13 Years)', async ({ browserName, page }) => {
+    const today = new Date();
+    await page.getByTestId('date').click(); // Click the birth date input field
+    if(browserName.toLowerCase() !== 'webkit')
+    {
+        await page.getByTestId('date').pressSequentially(today.toLocaleDateString('en-us')); // Type the date into the field (fill did not work here to sdoing a keyboard input instead)
+    }
+    else
+    {
+        await page.getByTestId('date').fill(today.toLocaleDateString('en-us')); // Type the date into the field (fill did not work here to sdoing a keyboard input instead)
+    }
+    const ExpectedText = 'You must be 13 years of age or older to create an account.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register Step 1 Valid)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const Placeholder = await page.locator("input.css-11aywtz").getAttribute("placeholder"); // Locator is placed on the input box for the handle
+    await expect(Placeholder).toEqual("Type your desired username"); // Find the text dispalyed for step 2
+})
+
+test('Register Step 1 Valid, Step 2 No Value)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
+    const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
+    await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without inputting text
+})
+
+test('Register Step 1 Valid, Step 2 Handle Already Taken)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
+    await page.locator("input.css-11aywtz").fill(BSKY_HANDLE); // Locator is placed on the input box for the handle
+    await page.getByRole('button', {name: 'Next'}).click(); // Click the next button to trigger an attempt at completeing step 2
+    const ExpectedText = 'That handle is already taken.';
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
+})
+
+test('Register Step 1 Valid, Step 2 Handle Less Than 3 Characters)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
+    await page.locator("input.css-11aywtz").fill("12"); // Locator is placed on the input box for the handle
+    const dAttributeValue = await page.locator('path').nth(2).getAttribute("d") // This locator points to the SVG object for "At least 3 characters" requirement
+    await expect(dAttributeValue).toEqual(DID_NOT_MEET_REQUIREMENT_D_VALUE); // Find the error message and then assert on it
+    const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
+    await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without correct handle size
+})
+
+test('Register Step 1 Valid, Step 2 Handle Has Space)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
+    await page.locator("input.css-11aywtz").fill("1234 "); // Locator is placed on the input box for the handle
+    const dAttributeValue = await page.locator('path').nth(1).getAttribute("d") // This locator points to the SVG object for "Only contains letters, numbers, and hyphens" requirement
+    await expect(dAttributeValue).toEqual(DID_NOT_MEET_REQUIREMENT_D_VALUE); // Find the error message and then assert on it
+    const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
+    await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without correct handle types
+})
+
+test('Register Step 1 Valid, Step 2 Handle Over 18 Characters)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
+    await page.locator("input.css-11aywtz").fill("aaaaaaaaaaaaaaaaaaa"); // Locator is placed on the input box for the handle
+    const dAttributeValue = await page.locator('path').nth(2).getAttribute("d") // This locator points to the SVG object for "No longer than 18 characters" requirement
+    await expect(dAttributeValue).toEqual(DID_NOT_MEET_REQUIREMENT_D_VALUE); // Find the error message and then assert on it
+    const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
+    await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without correct handle size
+})
+
+test('Register Step 1 Valid, Step 2 Good Handle)', async ({ page }) => {
+    await page.getByTestId('emailInput').click(); // Click the email input field
+    await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
+    await page.getByTestId('passwordInput').click(); // Click the password input field
+    await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
+    await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
+    await page.locator("input.css-11aywtz").fill(GOOD_HANDLE); // Locator is placed on the input box for the handle
+    await page.getByRole('button', {name: 'Next'}).click(); // Click the next button to trigger an attempt at registering
+    const ExpectedText = "Complete the challenge";
+    const LocatorText = page.getByText(ExpectedText);
+    await expect(LocatorText).toHaveText(ExpectedText); // Find Next button should not be enabled without correct handle size
+})
```