# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Search for feeds using hashtag
- Location: /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/SearchPageFeeds.test.ts:91:5

# Error details

```
Error: expect(received).toEqual(expected) // deep equality

Expected: true
Received: false
    at /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/SearchPageFeeds.test.ts:119:26
```

# Page snapshot

```yaml
- main:
  - button "Go back":
    - img
  - button "Open feed info screen":
    - text: "#nba ‪@skyfeed.xyz‬"
    - img
    - text: "829"
    - img
  - button "Pin to Home":
    - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - button "New post":
    - img
- navigation:
  - button "Switch accounts"
  - link "Home"
  - link "Explore"
  - link "Notifications": "1"
  - link "Chat"
  - link "Feeds"
  - link "Lists"
  - link "Profile"
  - link "Settings"
- img
- search "Search"
- link "Discover"
- link "Following"
- link "More feeds"
- img
- text: Trending
- button "Hide trending topics":
  - img
- link "Browse topic Phillies": Phillies
- link "Browse topic Mohsen Mahdawi": Mohsen Mahdawi
- link "Browse topic JD Vance": JD Vance
- link "Browse topic Harvard": Harvard
- link "Browse topic San Diego Earthquake": San Diego Earthquake
- link "Browse topic Meta Antitrust": Meta Antitrust
- link "Feedback"
- text: •
- link "Privacy"
- text: •
- link "Terms"
- text: •
- link "Help"
```

# Test source

```ts
   19 |   await page.getByTestId('loginUsernameInput').click();
   20 |
   21 |   // Enter username
   22 |   await page.getByTestId('loginUsernameInput').fill(`${BSKY_EMAIL}`);
   23 |
   24 |   // Click on password field
   25 |   await page.getByTestId('loginPasswordInput').click();
   26 |
   27 |   // Enter pswd
   28 |   await page.getByTestId('loginPasswordInput').fill(`${BSKY_PASS}`);
   29 |
   30 |   // Click on next button to sign-in
   31 |   await page.getByTestId('loginNextButton').click();
   32 |
   33 | }
   34 |
   35 | // Check if post exists, return boolean 
   36 | async function chkPostExist(postText: string): Promise<boolean> {
   37 |
   38 |     // If postText is not a string, return false
   39 |     if (typeof postText !== 'string' || !postText) {
   40 |         return false;
   41 |     }
   42 |
   43 |     // Else return
   44 |     return postText.trim().includes(' ');
   45 | }
   46 |
   47 | // Setup functionality
   48 | test.beforeEach(async ({ page }) => {
   49 |
   50 |     // Call login function
   51 |     await login(page);
   52 |
   53 | });
   54 |
   55 |
   56 | // Search for feeds by using term
   57 | test('Search for feeds using search term', {tag: '@search'}, async ({ page }) => {
   58 |
   59 |     // Search term
   60 |     const searchTerm = 'weather';
   61 |
   62 |     // Search for Feeds
   63 |     await page.getByRole('link', { name: 'Feeds', exact: true }).click();
   64 |
   65 |     // Click on search bar in feeds page
   66 |     await page.getByTestId('FeedsScreen').getByRole('search', { name: 'Search' }).click();
   67 |
   68 |     // Type searchTerm
   69 |     await page.getByRole('main').getByRole('search', { name: 'Search' }).fill(searchTerm);
   70 |
   71 |     // Stimulate pressing Enter key on keyboard
   72 |     await page.getByRole('main').getByRole('search', { name: 'Search' }).press('Enter');
   73 |
   74 |     // Click on a predefined weather feed
   75 |     await page.getByRole('link', { name: 'Ontario Weather #ONstorm' }).click();
   76 |
   77 |     // Select the first feed description seen
   78 |     let feedText = await page.getByTestId('postText').first().textContent();
   79 |
   80 |     // Check that post has no than one word
   81 |     let actual = await chkPostExist(feedText);
   82 |
   83 |     // Assertion
   84 |     // Verify post description has no than one word
   85 |     await expect(actual).toEqual(true);
   86 |
   87 | });
   88 |
   89 |
   90 | // Search for feeds using hashtag
   91 | test('Search for feeds using hashtag', {tag: '@search'}, async ({ page }) => {
   92 |
   93 |     // Search term
   94 |     const hashtag = '#nba';
   95 |
   96 |     // Search for Feeds
   97 |     await page.getByRole('link', { name: 'Feeds', exact: true }).click();
   98 |
   99 |     // Click on search bar in feeds page
  100 |     await page.getByTestId('FeedsScreen').getByRole('search', { name: 'Search' }).click();
  101 |
  102 |     // Type searchTerm
  103 |     await page.getByRole('main').getByRole('search', { name: 'Search' }).fill(hashtag);
  104 |
  105 |     // Stimulate pressing Enter key on keyboard
  106 |     await page.getByRole('main').getByRole('search', { name: 'Search' }).press('Enter');
  107 |
  108 |     // Click on a predefined feed
  109 |     await page.getByRole('link', { name: hashtag }).click();
  110 |
  111 |     // Select the first feed description seen
  112 |     let feedText = await page.getByTestId('postText').first().innerText();
  113 |
  114 |     // Check that post has more than one word
  115 |     let actual = await chkPostExist(feedText);
  116 |
  117 |     // Assertion
  118 |     // Verify post description has more than one word
> 119 |     await expect(actual).toEqual(true);
      |                          ^ Error: expect(received).toEqual(expected) // deep equality
  120 |
  121 | });
  122 |
```