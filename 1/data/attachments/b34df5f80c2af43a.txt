# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Cancel Post without typing any text
- Location: /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/PostPageCancellation.test.ts:45:5

# Error details

```
Error: locator.click: Test timeout of 30000ms exceeded.
Call log:
  - waiting for getByTestId('customFeedPage').getByTestId('composeFAB')

    at /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/PostPageCancellation.test.ts:48:72
```

# Page snapshot

```yaml
- text: Sign in Enter your username and password Hosting provider
- button "Bluesky Social":
  - img
  - text: Bluesky Social
  - img
- text: Account
- img
- textbox "Username or email address": undefined
- img
- textbox "Password": CIS565TestGroup
- button "Forgot password?": Forgot?
- img
- text: Incorrect username or password
- button "Back"
- button "Next"
```

# Test source

```ts
   1 | import { test, expect, type Page } from '@playwright/test';
   2 |
   3 | const BLUESKY_WEB_URL = 'https://bsky.app';
   4 |
   5 | const BSKY_EMAIL = process.env.BS_USERNAME;
   6 | const BSKY_PASS = process.env.BS_PASSWORD;
   7 |
   8 |
   9 | // Login function
  10 | async function login(page: Page): Promise<void> {
  11 |
  12 |   // Navigate to the login page
  13 |   await page.goto(`${BLUESKY_WEB_URL}`);
  14 |
  15 |   // Click the sign-in button
  16 |   await page.getByRole('button', { name: 'Sign in' }).click();
  17 |
  18 |   // Click on username field
  19 |   await page.getByTestId('loginUsernameInput').click();
  20 |
  21 |   // Enter username
  22 |   await page.getByTestId('loginUsernameInput').fill(`${BSKY_EMAIL}`);
  23 |
  24 |   // Click on password field
  25 |   await page.getByTestId('loginPasswordInput').click();
  26 |
  27 |   // Enter pswd
  28 |   await page.getByTestId('loginPasswordInput').fill(`${BSKY_PASS}`);
  29 |
  30 |   // Click on next button to sign-in
  31 |   await page.getByTestId('loginNextButton').click();
  32 |
  33 | }
  34 |
  35 | // Setup functionality
  36 | test.beforeEach(async ({ page }) => {
  37 |
  38 |     // Call login function
  39 |     await login(page);
  40 |
  41 | });
  42 |
  43 |
  44 | // Cancel post without typing any text
  45 | test('Cancel Post without typing any text', {tag: '@post'}, async ({ page }) => {
  46 |
  47 |     // Click on the create new post fab button
> 48 |     await page.getByTestId('customFeedPage').getByTestId('composeFAB').click();
     |                                                                        ^ Error: locator.click: Test timeout of 30000ms exceeded.
  49 |
  50 |     // Click on the cancel button within the create new post popup box
  51 |     await page.getByRole('button', { name: 'Cancel' }).click();
  52 |
  53 |     // Assertion
  54 |     // Verify that home screen is displayed by checking for Discovery & Following tabs
  55 |     const discoveryTab = await page.getByTestId('homeScreenFeedTabs-Discover');
  56 |     await expect(discoveryTab).toBeVisible();
  57 |
  58 |     const followingTab = await page.getByTestId('homeScreenFeedTabs-Following');
  59 |     await expect(followingTab).toBeVisible();
  60 |
  61 | });
  62 |
  63 | // Cancel post during its creation
  64 | test('Cancel Post during its creation', {tag: '@post'}, async ({ page }) => {
  65 |
  66 |     // Click on the create new post fab button
  67 |     await page.getByTestId('customFeedPage').getByTestId('composeFAB').click();
  68 |
  69 |     // Click in post paragraph field
  70 |     await page.getByRole('paragraph').click();
  71 |
  72 |     // Type post message
  73 |     await page.getByRole('textbox', { name: 'Rich-Text Editor' }).fill('My first BlueSky post');
  74 |
  75 |     // Click on the cancel button within the create new post popup box
  76 |     await page.getByRole('button', { name: 'Cancel' }).click();
  77 |
  78 |     await page.waitForTimeout(3000);
  79 |
  80 |     // Verify discard button is visible
  81 |     await page.getByTestId('confirmBtn').click();
  82 |
  83 |     // Verify that home screen is displayed by checking for Discovery & Following tabs
  84 |     const discoveryTab = await page.getByTestId('homeScreenFeedTabs-Discover');
  85 |     await expect(discoveryTab).toBeVisible();
  86 |
  87 |     const followingTab = await page.getByTestId('homeScreenFeedTabs-Following');
  88 |     await expect(followingTab).toBeVisible();
  89 |
  90 | });
  91 |
```