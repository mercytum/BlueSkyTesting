# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Delete Last Created Post
- Location: /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/PostPageDeletion.test.ts:69:5

# Error details

```
Error: locator.click: Test timeout of 30000ms exceeded.
Call log:
  - waiting for getByRole('link', { name: 'Profile', exact: true })

    at /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/PostPageDeletion.test.ts:89:68
```

# Page snapshot

```yaml
- text: Sign in Enter your username and password Hosting provider
- button "Bluesky Social":
  - img
  - text: Bluesky Social
  - img
- text: Account
- img
- textbox "Username or email address": undefined
- img
- textbox "Password": CIS565TestGroup
- button "Forgot password?": Forgot?
- img
- text: Rate Limit Exceeded
- button "Back"
- button "Next"
```

# Test source

```ts
   1 | import { test, expect, type Page } from '@playwright/test';
   2 |
   3 | const BLUESKY_WEB_URL = 'https://bsky.app';
   4 |
   5 | const BSKY_EMAIL = process.env.BS_USERNAME;
   6 | const BSKY_PASS = process.env.BS_PASSWORD;
   7 |
   8 |
   9 | // Login function
   10 | async function login(page: Page): Promise<void> {
   11 |
   12 |   // Navigate to the login page
   13 |   await page.goto(`${BLUESKY_WEB_URL}`);
   14 |
   15 |   // Click the sign-in button
   16 |   await page.getByRole('button', { name: 'Sign in' }).click();
   17 |
   18 |   // Click on username field
   19 |   await page.getByTestId('loginUsernameInput').click();
   20 |
   21 |   // Enter username
   22 |   await page.getByTestId('loginUsernameInput').fill(`${BSKY_EMAIL}`);
   23 |
   24 |   // Click on password field
   25 |   await page.getByTestId('loginPasswordInput').click();
   26 |
   27 |   // Enter pswd
   28 |   await page.getByTestId('loginPasswordInput').fill(`${BSKY_PASS}`);
   29 |
   30 |   // Click on next button to sign-in
   31 |   await page.getByTestId('loginNextButton').click();
   32 |
   33 | }
   34 |
   35 | // getDate function
   36 | async function getDate() {
   37 |
   38 |   // Get current date
   39 |   const currentDate = new Date();
   40 |
   41 |   // Extract month, day and year from currentDate obj
   42 |   const monthIndex = currentDate.getMonth();
   43 |   const day = currentDate.getDate();
   44 |   const year = currentDate.getFullYear();
   45 |
   46 |   // Months of the year array list
   47 |   const monthNames = ['January','February','March','April','May','June','July','August','September','October','November','December'];
   48 |
   49 |   // Assign month name based on current month index
   50 |   const monthOfYr = monthNames[monthIndex];
   51 |
   52 |   // Format the date in mm dd, yyyy format
   53 |   const formatDate = `${monthOfYr} ${day}, ${year}`
   54 |
   55 |   // Return currentDate
   56 |   return formatDate;
   57 |
   58 | }
   59 |
   60 | // Setup functionality
   61 | test.beforeEach(async ({ page }) => {
   62 |
   63 |     // Call login function
   64 |     await login(page);
   65 |
   66 | });
   67 |
   68 | // Delete last created Post
   69 | test('Delete Last Created Post', {tag: '@post'}, async ({ page }) => {
   70 |
   71 |     // Get current date
   72 |     const currentDate = new Date();
   73 |
   74 |     // Extract month, day and year from currentDate obj
   75 |     const monthIndex = currentDate.getMonth();
   76 |     const day = currentDate.getDate();
   77 |     const year = currentDate.getFullYear();
   78 |
   79 |     // Months of the year array list
   80 |     const monthNames = ['January','February','March','April','May','June','July','August','September','October','November','December'];
   81 |
   82 |     // Assign month name based on current month index
   83 |     const monthOfYr = monthNames[monthIndex];
   84 |
   85 |     // Format the date in mm dd, yyyy format
   86 |     const formatDate = `${monthOfYr} ${day}, ${year}`;
   87 |
   88 |     // Navigate to Profile
>  89 |     await page.getByRole('link', { name: 'Profile', exact: true }).click();
      |                                                                    ^ Error: locator.click: Test timeout of 30000ms exceeded.
   90 |
   91 |     // Get the number of posts
   92 |     const post = await page.locator('xpath=//*[@id="root"]/div/div/div/div/div/main/div/div/div[2]/div/div/div[2]/div/div[1]/div[1]/div/div[2]/div[3]/div/div').innerHTML();
   93 |
   94 |     // Split off the first element of variable
   95 |     let postNum: number = parseInt(post.split("")[0]);
   96 |
   97 |     // Select Post tab
   98 |     await page.getByTestId('profilePager-Posts').click();
   99 |
  100 |     // Wait for 5 secs for page elems to full load
  101 |     await page.waitForTimeout(5000);
  102 |
  103 |     // Select ellipses for post based on current date
  104 |     await page.getByRole('link', { name: `cis565testgroup.bsky.social\'s avatar View profileView profile Â· ${formatDate}` }).first().getByTestId('postDropdownBtn').click();
  105 |
  106 |     // Click delete this post
  107 |     await page.getByTestId('postDropdownDeleteBtn').click();
  108 |
  109 |     // Confirm post deletion
  110 |     await page.getByRole('button', { name: 'Delete' }).click();
  111 |
  112 |     // Wait for 5 secs for page elems to full load
  113 |     await page.waitForTimeout(5000);
  114 |
  115 |     // Initiate a page reload to show upated post numbers
  116 |     await page.reload();
  117 |
  118 |     // Navigate to profile (click on profile nav link)
  119 |     await page.getByRole('link', { name: 'Profile', exact: true }).click();
  120 |
  121 |     // Get the number of posts
  122 |     const postChk2 = await page.locator('xpath=//*[@id="root"]/div/div/div/div/div/main/div/div/div/div/div/div[2]/div/div[1]/div[1]/div/div[2]/div[3]/div/div').innerHTML();
  123 |
  124 |     // Split off the first element of variable
  125 |     let actualNum: number = parseInt(postChk2.split("")[0]);
  126 |  
  127 |     // Assertions
  128 |     let expectedPosts = postNum -=1;
  129 |
  130 |     // Expected posts number to have decremented as latest post was deleted
  131 |     await expect(actualNum).toEqual(expectedPosts);    
  132 |
  133 |
  134 | });
  135 |
```