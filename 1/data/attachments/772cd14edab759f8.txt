# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Search for posts using general search
- Location: /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/SearchPagePosts.test.ts:57:5

# Error details

```
Error: locator.click: Test timeout of 30000ms exceeded.
Call log:
  - waiting for getByRole('search', { name: 'Search' })

    at /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/SearchPagePosts.test.ts:63:56
```

# Page snapshot

```yaml
- text: Sign in Enter your username and password Hosting provider
- button "Bluesky Social":
  - img
  - text: Bluesky Social
  - img
- text: Account
- img
- textbox "Username or email address": undefined
- img
- textbox "Password": CIS565TestGroup
- button "Forgot password?": Forgot?
- img
- text: Rate Limit Exceeded
- button "Back"
- button "Next"
```

# Test source

```ts
   1 | import { test, expect, type Page } from '@playwright/test';
   2 |
   3 | const BLUESKY_WEB_URL = 'https://bsky.app';
   4 |
   5 | const BSKY_EMAIL = process.env.BS_USERNAME;
   6 | const BSKY_PASS = process.env.BS_PASSWORD;
   7 |
   8 |
   9 | // Login function
   10 | async function login(page: Page): Promise<void> {
   11 |
   12 |   // Navigate to the login page
   13 |   await page.goto(`${BLUESKY_WEB_URL}`);
   14 |
   15 |   // Click the sign-in button
   16 |   await page.getByRole('button', { name: 'Sign in' }).click();
   17 |
   18 |   // Click on username field
   19 |   await page.getByTestId('loginUsernameInput').click();
   20 |
   21 |   // Enter username
   22 |   await page.getByTestId('loginUsernameInput').fill(`${BSKY_EMAIL}`);
   23 |
   24 |   // Click on password field
   25 |   await page.getByTestId('loginPasswordInput').click();
   26 |
   27 |   // Enter pswd
   28 |   await page.getByTestId('loginPasswordInput').fill(`${BSKY_PASS}`);
   29 |
   30 |   // Click on next button to sign-in
   31 |   await page.getByTestId('loginNextButton').click();
   32 |
   33 | }
   34 |
   35 | // Check if post exists, return boolean 
   36 | async function chkPostExist(postText: string): Promise<boolean> {
   37 |
   38 |     // If postText is not a string, return false
   39 |     if (typeof postText !== 'string' || !postText) {
   40 |         return false;
   41 |     }
   42 |
   43 |     // Else return
   44 |     return postText.trim().includes(' ');
   45 | }
   46 |
   47 | // Setup functionality
   48 | test.beforeEach(async ({ page }) => {
   49 |
   50 |     // Call login function
   51 |     await login(page);
   52 |
   53 | });
   54 |
   55 |
   56 | // Search for posts using general search
   57 | test('Search for posts using general search', {tag: '@search'}, async ({ page }) => {
   58 |
   59 |     // Search term
   60 |     const searchTerm = 'pickleball';
   61 |
   62 |     // Navigate to search bar
>  63 |     await page.getByRole('search', { name: 'Search' }).click();
      |                                                        ^ Error: locator.click: Test timeout of 30000ms exceeded.
   64 |
   65 |     // Type searchTerm
   66 |     await page.getByRole('search', { name: 'Search' }).fill(searchTerm);
   67 |
   68 |     // Stimulate pressing Enter key on keyboard
   69 |     await page.getByRole('search', { name: 'Search' }).press('Enter');
   70 |
   71 |     // Select the first post description seen
   72 |     let postText = await page.getByTestId('postText').first().textContent();
   73 |
   74 |     // Check that post has no than one word
   75 |     let actual = await chkPostExist(postText);
   76 |
   77 |     // Assertion
   78 |     // Verify post description has no than one word
   79 |     await expect(actual).toEqual(true);
   80 |
   81 | });
   82 |
   83 |
   84 | // Search for post within user profile
   85 | test('Search for post within user profile', {tag: '@search'}, async ({ page }) => {
   86 |
   87 |     // Search term
   88 |     const profile = '@majorleaguepb.bsky.social'
   89 |
   90 |     // Navigate to search bar
   91 |     await page.getByRole('search', { name: 'Search' }).click();
   92 |
   93 |     // Search using profile handle
   94 |     await page.getByRole('search', { name: 'Search' }).fill(profile);
   95 |     
   96 |     // Click on exact profile handle
   97 |     await page.getByRole('link', { name: 'majorleaguepb.bsky.social', exact: true }).click();
   98 |
   99 |     // Select the first post description seen
  100 |     let postText = await page.getByTestId('postText').first().textContent();
  101 |
  102 |     // Check that post has more than one word
  103 |     let actual = await chkPostExist(postText);
  104 |
  105 |     // Assertion
  106 |     // Verify post description has more than one word
  107 |     await expect(actual).toEqual(true);
  108 |
  109 | });
  110 |
```