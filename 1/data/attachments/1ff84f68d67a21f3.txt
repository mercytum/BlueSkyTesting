# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Search for empty term
- Location: /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/SearchPageErrorCase.test.ts:44:5

# Error details

```
Error: locator.click: Test timeout of 30000ms exceeded.
Call log:
  - waiting for getByRole('search', { name: 'Search' })

    at /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/SearchPageErrorCase.test.ts:47:56
```

# Page snapshot

```yaml
- text: Sign in Enter your username and password Hosting provider
- button "Bluesky Social":
  - img
  - text: Bluesky Social
  - img
- text: Account
- img
- textbox "Username or email address": undefined
- img
- textbox "Password": CIS565TestGroup
- button "Forgot password?": Forgot?
- img
- text: Rate Limit Exceeded
- button "Back"
- button "Next"
```

# Test source

```ts
   1 | import { test, expect, type Page } from '@playwright/test';
   2 |
   3 | const BLUESKY_WEB_URL = 'https://bsky.app';
   4 |
   5 | const BSKY_EMAIL = process.env.BS_USERNAME;
   6 | const BSKY_PASS = process.env.BS_PASSWORD;
   7 |
   8 | // Login function
   9 | async function login(page: Page): Promise<void> {
  10 |
  11 |   // Navigate to the login page
  12 |   await page.goto(`${BLUESKY_WEB_URL}`);
  13 |
  14 |   // Click the sign-in button
  15 |   await page.getByRole('button', { name: 'Sign in' }).click();
  16 |
  17 |   // Click on username field
  18 |   await page.getByTestId('loginUsernameInput').click();
  19 |
  20 |   // Enter username
  21 |   await page.getByTestId('loginUsernameInput').fill(`${BSKY_EMAIL}`);
  22 |
  23 |   // Click on password field
  24 |   await page.getByTestId('loginPasswordInput').click();
  25 |
  26 |   // Enter pswd
  27 |   await page.getByTestId('loginPasswordInput').fill(`${BSKY_PASS}`);
  28 |
  29 |   // Click on next button to sign-in
  30 |   await page.getByTestId('loginNextButton').click();
  31 |
  32 | }
  33 |
  34 | // Setup functionality
  35 | test.beforeEach(async ({ page }) => {
  36 |
  37 |     // Call login function
  38 |     await login(page);
  39 |
  40 | });
  41 |
  42 |
  43 | // Search for empty term
  44 | test('Search for empty term', {tag: '@search'}, async ({ page }) => {
  45 |
  46 |     // Navigate to search bar
> 47 |     await page.getByRole('search', { name: 'Search' }).click();
     |                                                        ^ Error: locator.click: Test timeout of 30000ms exceeded.
  48 |
  49 |     // Stimulate pressing Enter key on keyboard
  50 |     await page.getByRole('search', { name: 'Search' }).press('Enter');
  51 |
  52 |     // Get Discovery text
  53 |     let discoveryTabExt = await page.getByTestId('homeScreenFeedTabs-Discover').textContent();
  54 |
  55 |     // Get Following text
  56 |     let followTabExt = await page.getByTestId('homeScreenFeedTabs-Following').textContent();
  57 |
  58 |     // Get current url
  59 |     let currentUrl: string = page.url();
  60 |
  61 |     // Assertion
  62 |     // Verify empty search remains on search page where elements: Discover, Following are seen
  63 |     await expect(discoveryTabExt).toContain('Discover');
  64 |     await expect(followTabExt).toContain('Following');
  65 |
  66 |     // Verify current url searched matches default home url
  67 |     await expect(currentUrl).toContain('https://bsky.app');
  68 |         
  69 | });
  70 |
  71 |
```