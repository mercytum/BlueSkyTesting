# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Create Post using 300 characters
- Location: /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/PostPageCreation.test.ts:88:5

# Error details

```
Error: locator.click: Test timeout of 30000ms exceeded.
Call log:
  - waiting for getByRole('link', { name: 'Profile', exact: true })

    at /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/PostPageCreation.test.ts:91:68
```

# Page snapshot

```yaml
- text: Sign in Enter your username and password Hosting provider
- button "Bluesky Social":
  - img
  - text: Bluesky Social
  - img
- text: Account
- img
- textbox "Username or email address": undefined
- img
- textbox "Password": CIS565TestGroup
- button "Forgot password?": Forgot?
- img
- text: Incorrect username or password
- button "Back"
- button "Next"
```

# Test source

```ts
   1 | import { test, expect, type Page } from '@playwright/test';
   2 | import { promises } from "fs";
   3 |
   4 | const BLUESKY_WEB_URL = 'https://bsky.app';
   5 |
   6 | const BSKY_EMAIL = process.env.BS_USERNAME;
   7 | const BSKY_PASS = process.env.BS_PASSWORD;
   8 |
   9 | // Global total post variable
   10 | let TOTAL_POSTS = 0;
   11 |
   12 | // Login function
   13 | async function login(page: Page): Promise<void> {
   14 |
   15 |   // Navigate to the login page
   16 |   await page.goto(`${BLUESKY_WEB_URL}`);
   17 |
   18 |   // Click the sign-in button
   19 |   await page.getByRole('button', { name: 'Sign in' }).click();
   20 |
   21 |   // Click on username field
   22 |   await page.getByTestId('loginUsernameInput').click();
   23 |
   24 |   // Enter username
   25 |   await page.getByTestId('loginUsernameInput').fill(`${BSKY_EMAIL}`);
   26 |
   27 |   // Click on password field
   28 |   await page.getByTestId('loginPasswordInput').click();
   29 |
   30 |   // Enter pswd
   31 |   await page.getByTestId('loginPasswordInput').fill(`${BSKY_PASS}`);
   32 |
   33 |   // Click on next button to sign-in
   34 |   await page.getByTestId('loginNextButton').click();
   35 |
   36 | }
   37 |
   38 | // Check if post exists, return boolean 
   39 | async function chkPostExist(postText: string): Promise<boolean> {
   40 |
   41 |     // If postText is not a string, return false
   42 |     if (typeof postText !== 'string' || !postText) {
   43 |         return false;
   44 |     }
   45 |
   46 |     // Else return
   47 |     return postText.trim().includes(' ');
   48 | }
   49 |
   50 |
   51 | // Setup functionality
   52 | test.beforeEach(async ({ page }) => {
   53 |
   54 |     // Call login function
   55 |     await login(page);
   56 |
   57 | });
   58 |
   59 | // Create Post using one character
   60 | test('Create Post using one character', {tag: '@post'}, async ({ page }) => {
   61 |
   62 |     // Navigate to profile page
   63 |     await page.getByRole('link', { name: 'Profile', exact: true }).click();
   64 |
   65 |     // Click on the compose button
   66 |     await page.getByTestId('profileView').getByTestId('composeFAB').click();
   67 |
   68 |     // Click on the post textbox and type 1 character post msg
   69 |     await page.getByRole('textbox', { name: 'Rich-Text Editor' }).fill('A');
   70 |     
   71 |     // Click the publish / post button to create post
   72 |     await page.getByTestId('composerPublishBtn').click();
   73 |
   74 |     // Initiate a page reload to show upated post numbers
   75 |     await page.reload();
   76 |
   77 |     // Select the first post description seen
   78 |     let postText = await page.getByTestId('postText').first().textContent();
   79 |
   80 |     // Assertion
   81 |     // Expected length of post toBe 1
   82 |     await expect(postText?.length).toBe(1);
   83 |
   84 | });
   85 |
   86 |
   87 | // Create Post using 300 character
   88 | test('Create Post using 300 characters', {tag: '@post'}, async ({ page }) => {
   89 |
   90 |     // Navigate to profile page
>  91 |     await page.getByRole('link', { name: 'Profile', exact: true }).click();
      |                                                                    ^ Error: locator.click: Test timeout of 30000ms exceeded.
   92 |
   93 |     // Click on the compose button
   94 |     await page.getByTestId('profileView').getByTestId('composeFAB').click();
   95 |
   96 |     // Click on the post textbox and type 300 character post msg
   97 |     await page.getByRole('textbox', { name: 'Rich-Text Editor' }).fill('Lorem ipsum odor amet, consectetuer adipiscing elit. Etiam himenaeos nascetur elit molestie semper. Sagittis ad senectus mauris; facilisi maximus a. Ex lectus ad tempor placerat egestas faucibus, a quam tincidunt. Parturient sagittis curae dignissim, tortor nam molestie ullamcorper mattis interdums.');
   98 |     
   99 |     // Click the publish / post button to create post
  100 |     await page.getByTestId('composerPublishBtn').click();
  101 |
  102 |     // Initiate a page reload to show upated post numbers
  103 |     await page.reload();
  104 |
  105 |
  106 |     // Select the first post description seen
  107 |     let postText = await page.getByTestId('postText').first().textContent();
  108 |
  109 |     // Check that post has more than one word
  110 |     let actual = await chkPostExist(postText);
  111 |
  112 |     // Assertion
  113 |     // Expected length of post toBe 300
  114 |     await expect(postText?.length).toBe(300);
  115 |
  116 |     // Verify post description has more than one word
  117 |     await expect(actual).toEqual(true);
  118 |
  119 | });
  120 |
```