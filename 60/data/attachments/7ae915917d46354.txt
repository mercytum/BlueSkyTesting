# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Search for feeds using search term
- Location: /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/SearchPageFeeds.test.ts:57:5

# Error details

```
Error: expect(received).toEqual(expected) // deep equality

Expected: true
Received: false
    at /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/SearchPageFeeds.test.ts:85:26
```

# Page snapshot

```yaml
- main:
  - button "Go back":
    - img
  - button "Open feed info screen":
    - text: "Ontario Weather #ONstorm ‪@bergsbites.bsky.social‬"
    - img
    - text: "77"
    - img
  - button "Pin to Home":
    - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - img
  - button "New post":
    - img
- navigation:
  - button "Switch accounts"
  - link "Home"
  - link "Explore"
  - link "Notifications"
  - link "Chat"
  - link "Feeds"
  - link "Lists"
  - link "Profile"
  - link "Settings"
- img
- search "Search"
- link "Discover"
- link "Following"
- link "More feeds"
- img
- text: Trending
- button "Hide trending topics":
  - img
- link "Browse topic Abrego Garcia": Abrego Garcia
- link "Browse topic Dan Caldwell": Dan Caldwell
- link "Browse topic Karoline Leavitt": Karoline Leavitt
- link "Browse topic OpenAI Network": OpenAI Network
- link "Browse topic 4chan Hack": 4chan Hack
- link "Browse topic Jackie Robinson": Jackie Robinson
- link "Feedback"
- text: •
- link "Privacy"
- text: •
- link "Terms"
- text: •
- link "Help"
```

# Test source

```ts
   1 | import { test, expect, type Page } from '@playwright/test';
   2 |
   3 | const BLUESKY_WEB_URL = 'https://bsky.app';
   4 |
   5 | const BSKY_EMAIL = process.env.SECRET_USR;
   6 | const BSKY_PASS = process.env.SECRET_PWD;
   7 |
   8 |
   9 | // Login function
   10 | async function login(page: Page): Promise<void> {
   11 |
   12 |   // Navigate to the login page
   13 |   await page.goto(`${BLUESKY_WEB_URL}`);
   14 |
   15 |   // Click the sign-in button
   16 |   await page.getByRole('button', { name: 'Sign in' }).click();
   17 |
   18 |   // Click on username field
   19 |   await page.getByTestId('loginUsernameInput').click();
   20 |
   21 |   // Enter username
   22 |   await page.getByTestId('loginUsernameInput').fill(`${BSKY_EMAIL}`);
   23 |
   24 |   // Click on password field
   25 |   await page.getByTestId('loginPasswordInput').click();
   26 |
   27 |   // Enter pswd
   28 |   await page.getByTestId('loginPasswordInput').fill(`${BSKY_PASS}`);
   29 |
   30 |   // Click on next button to sign-in
   31 |   await page.getByTestId('loginNextButton').click();
   32 |
   33 | }
   34 |
   35 | // Check if post exists, return boolean 
   36 | async function chkPostExist(postText: string): Promise<boolean> {
   37 |
   38 |     // If postText is not a string, return false
   39 |     if (typeof postText !== 'string' || !postText) {
   40 |         return false;
   41 |     }
   42 |
   43 |     // Else return
   44 |     return postText.trim().includes(' ');
   45 | }
   46 |
   47 | // Setup functionality
   48 | test.beforeEach(async ({ page }) => {
   49 |
   50 |     // Call login function
   51 |     await login(page);
   52 |
   53 | });
   54 |
   55 |
   56 | // Search for feeds by using term
   57 | test('Search for feeds using search term', {tag: '@search'}, async ({ page }) => {
   58 |
   59 |     // Search term
   60 |     const searchTerm = 'weather';
   61 |
   62 |     // Search for Feeds
   63 |     await page.getByRole('link', { name: 'Feeds', exact: true }).click();
   64 |
   65 |     // Click on search bar in feeds page
   66 |     await page.getByTestId('FeedsScreen').getByRole('search', { name: 'Search' }).click();
   67 |
   68 |     // Type searchTerm
   69 |     await page.getByRole('main').getByRole('search', { name: 'Search' }).fill(searchTerm);
   70 |
   71 |     // Stimulate pressing Enter key on keyboard
   72 |     await page.getByRole('main').getByRole('search', { name: 'Search' }).press('Enter');
   73 |
   74 |     // Click on a predefined weather feed
   75 |     await page.getByRole('link', { name: 'Ontario Weather #ONstorm' }).click();
   76 |
   77 |     // Select the first feed description seen
   78 |     let feedText = await page.getByTestId('postText').first().textContent();
   79 |
   80 |     // Check that post has no than one word
   81 |     let actual = await chkPostExist(feedText);
   82 |
   83 |     // Assertion
   84 |     // Verify post description has no than one word
>  85 |     await expect(actual).toEqual(true);
      |                          ^ Error: expect(received).toEqual(expected) // deep equality
   86 |
   87 | });
   88 |
   89 |
   90 | // Search for feeds using hashtag
   91 | test('Search for feeds using hashtag', {tag: '@search'}, async ({ page }) => {
   92 |
   93 |     // Search term
   94 |     const hashtag = '#nba';
   95 |
   96 |     // Search for Feeds
   97 |     await page.getByRole('link', { name: 'Feeds', exact: true }).click();
   98 |
   99 |     // Click on search bar in feeds page
  100 |     await page.getByTestId('FeedsScreen').getByRole('search', { name: 'Search' }).click();
  101 |
  102 |     // Type searchTerm
  103 |     await page.getByRole('main').getByRole('search', { name: 'Search' }).fill(hashtag);
  104 |
  105 |     // Stimulate pressing Enter key on keyboard
  106 |     await page.getByRole('main').getByRole('search', { name: 'Search' }).press('Enter');
  107 |
  108 |     // Click on a predefined feed
  109 |     await page.getByRole('link', { name: hashtag }).click();
  110 |
  111 |     // Select the first feed description seen
  112 |     let feedText = await page.getByTestId('postText').first().innerText();
  113 |
  114 |     // Check that post has more than one word
  115 |     let actual = await chkPostExist(feedText);
  116 |
  117 |     // Assertion
  118 |     // Verify post description has more than one word
  119 |     await expect(actual).toEqual(true);
  120 |
  121 | });
  122 |
```

# Local changes

```diff
diff --git a/.env b/.env
new file mode 100644
index 000000000..3149fd510
--- /dev/null
+++ b/.env
@@ -0,0 +1,3 @@
+# Global Environment variables
+BS_PASSWORD = [add bluesky account password]
+BS_USERNAME = [add bluesky account username]
diff --git a/How To Deploy ReadMe.md b/How To Deploy ReadMe.md
index 6e94084a5..abcf53f8f 100644
--- a/How To Deploy ReadMe.md	
+++ b/How To Deploy ReadMe.md	
@@ -18,20 +18,39 @@
 ***
 
 ### How to run CI/CD Pipeline?
-##### 1. Commit a change to the 'main' branch or create a 'pull request'
+##### [Option 1] Commit a change to the 'main' branch 
+##### [Option 2] Create a 'pull request' to the 'main' branch
+##### [Option 3] Manually re-run any of the 'Playwright Test' previously executed within the 'Actions' section
 
 ***
 
 ## How to run Locally (without CI/CD Pipeline)?
 #### Prerequisites:
-###### 1. Ensure VS Code (v1.97.1 or later) is installed on your local machine 
-###### 2. Git clone this repo
-###### 3. Open the clone repo project within VS Code
-###### 4. Within VS Code Extensions, install the 'Playwright Test for VSCode by Microsoft" (v1.1.13 or later)
-###### 5. Enable the plugin once installed
-###### 6. Open terminal within VSCode and run "yarn" to install dependencies
-###### 7. Run "yarn web" to start local server instance and note the localhost url plus port being used to run the application
-###### 8. Open the playwright.config.ts file and set the webserver url attribute to equal the url indicated in Step 7 (in most cases it will run on http://127.0.0.1:19006)
-###### 9. Save changes within the playwright.config.ts file
-###### 10. Open another terminal instance, and run the following cmd: npx playwright test
-###### 11. [Optional] you can run the tests with parallelization by adding '--workers=3' 
+###### 1. Ensure VS Code (v1.97.1 or later) is installed on your local machine (https://code.visualstudio.com/download)
+###### 2. Ensure Node (v20 or later) is installed on your local machine (https://nodejs.org/en/download)
+###### -- run node -v (verify installation success)
+###### 3. Ensure yarn (v1.22.22) is installed on your local machine (https://classic.yarnpkg.com/lang/en/docs/install/)
+###### -- run npm install --global yarn
+###### -- run yarn --version (verify installation success)
+###### 4. Ensure npm Dotenv is installed (https://www.npmjs.com/package/dotenv)
+
+#### Setup Project:
+###### 1. Git clone this repo
+###### 2. Open the clone repo project within VS Code
+###### 3. Within the root of cloned project, navigate to the .env file and add your bluesky account password to the BS_PASSWORD variable and bluesky username to the BS_USERNAME variable and save the file
+
+###### 4. Navigate to each test file within the \_\_tests\_\_/lib/Playwright directory and change the following: 
+###### 'const BSKY_EMAIL = process.env.SECRET_USR;' to 'const BSKY_EMAIL = process.env.BS_USERNAME;'
+###### 'const BSKY_PASS = process.env.SECRET_PWD;' to 'const BSKY_PASS = process.env.BS_PASSWORD;'
+
+###### and add "import dotenv from 'dotenv';" to the top of the .ts files (all of them).
+
+###### 5. Save the files
+
+#### Run the Tests:
+###### 1. Open terminal within VSCode and run "yarn" to install dependencies
+###### 2. Run "yarn web" to start local server instance and note the localhost url plus port being used to run the application (this takes several minutes)
+###### 3. Open the playwright.config.ts file and set the webserver url attribute to equal the url indicated in Step 2 (in most cases it will run on http://127.0.0.1:19006)
+###### 4. Save changes within the playwright.config.ts file
+###### 5. Open another terminal instance, and run the following cmd: npx playwright test
+###### 6. [Optional] you can run the tests with parallelization by adding '--workers=3' 
\ No newline at end of file
```