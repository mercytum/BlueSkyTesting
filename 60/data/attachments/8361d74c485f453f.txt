# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Register With Birth Date Under 13 Years
- Location: /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/registration.test.ts:50:5

# Error details

```
Error: locator.fill: Error: Malformed value
Call log:
  - waiting for getByTestId('date')
    - locator resolved to <input type="date" max="2025-04-16" data-testid="date" value="2005-04-21" hitslop="[object Object]" keyboardappearance="light" aria-label="Date of birth" placeholder="Date of birth" placeholdertextcolor="hsl(211, 20%, 53%)" accessibilityhint="Select your date of birth"/>
    - fill("4/16/2025")
  - attempting fill action
    - waiting for element to be visible, enabled and editable

    at /home/runner/work/BlueSkyTesting/BlueSkyTesting/__tests__/lib/Playwright/registration.test.ts:59:40
```

# Page snapshot

```yaml
- text: Create Account We're so excited to have you join us! Step 1 of 3 Your account You are creating an account on
- button "Bluesky Social":
  - text: Bluesky Social
  - img
- text: Email
- img
- textbox "Enter your email address"
- text: Password
- img
- textbox "Choose your password"
- text: Your birth date
- img
- textbox "Date of birth"
- text: By creating an account you agree to the
- link "Read the Bluesky Terms of Service": Terms of Service
- text: and
- link "Read the Bluesky Privacy Policy": Privacy Policy
- text: .
- button "Go back to previous step": Back
- button "Continue to next step": Next
- img
- combobox:
  - option "English" [selected]
  - option "Aragonés – Aragonese"
  - option "Asturianu – Asturian"
  - option "Català – Catalan"
  - option "Cymraeg – Welsh"
  - option "Dansk – Danish"
  - option "Deutsch – German"
  - option "Ελληνικά – Greek"
  - option "English (UK)"
  - option "Esperanto"
  - option "Español – Spanish"
  - option "Euskera – Basque"
  - option "Suomi – Finnish"
  - option "Français – French"
  - option "Gaeilge – Irish"
  - option "Gàidhlig – Scottish Gaelic"
  - option "Galego – Galician"
  - option "हिंदी – Hindi"
  - option "magyar – Hungarian"
  - option "Interlingua"
  - option "Bahasa Indonesia – Indonesian"
  - option "Italiano – Italian"
  - option "日本語 – Japanese"
  - option "ភាសាខ្មែរ – Khmer"
  - option "한국어 – Korean"
  - option "नेपाली – Nepali"
  - option "Nederlands – Dutch"
  - option "Polski – Polish"
  - option "Português (BR) – Portuguese (BR)"
  - option "Română – Romanian"
  - option "Русский – Russian"
  - option "Svenska – Swedish"
  - option "ภาษาไทย – Thai"
  - option "Türkçe – Turkish"
  - option "Українська – Ukrainian"
  - option "Tiếng Việt – Vietnamese"
  - option "简体中文 – Simplified Chinese"
  - option "繁體中文 – Traditional Chinese"
  - option "粵文 – Cantonese"
- text: Having trouble?
- link "Contact support"
```

# Test source

```ts
   1 | import { test, expect, type Page } from '@playwright/test';
   2 |
   3 | const BLUESKY_WEB_URL = "http://localhost:19006/"; // TODO: We should build a local version of bluesky. This way changes in the wroking repo can be tested
   4 | const BSKY_HANDLE = "CIS565TestGroup"; // TODO: Make these secret in GitHub
   5 | const GOOD_HANDLE = "12345--AFbth-wSDFe"
   6 |
   7 | const DID_NOT_MEET_REQUIREMENT_D_VALUE = "M4.293 4.293a1 1 0 0 1 1.414 0L12 10.586l6.293-6.293a1 1 0 1 1 1.414 1.414L13.414 12l6.293 6.293a1 1 0 0 1-1.414 1.414L12 13.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L10.586 12 4.293 5.707a1 1 0 0 1 0-1.414Z"
   8 |
   9 | test.beforeEach(async ({ page }) => {
   10 |     await page.goto(BLUESKY_WEB_URL);
   11 |     await page.getByRole('button', {name: 'Create Account'}).click(); // Click Sign in button
   12 | });
   13 |
   14 | test('Register With No Credentials', async ({ page }) => {
   15 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
   16 |     const ExpectedText = 'Please enter your email.';
   17 |     const LocatorText = page.getByText(ExpectedText);
   18 |     await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
   19 | })
   20 |
   21 | test('Register With Only Email (valid)', async ({ page }) => {
   22 |     await page.getByTestId('emailInput').click(); // Click the email input field
   23 |     await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
   24 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
   25 |     const ExpectedText = 'Please choose your password.';
   26 |     const LocatorText = page.getByText(ExpectedText);
   27 |     await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
   28 | })
   29 |
   30 | test('Register With Only Email (invalid)', async ({ page }) => {
   31 |     await page.getByTestId('emailInput').click(); // Click the email input field
   32 |     await page.getByTestId('emailInput').fill('test'); // Fill the email field
   33 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
   34 |     const ExpectedText = 'Your email appears to be invalid.';
   35 |     const LocatorText = page.getByText(ExpectedText);
   36 |     await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
   37 | })
   38 |
   39 | test('Register With Valid Email, Short Password', async ({ page }) => {
   40 |     await page.getByTestId('emailInput').click(); // Click the email input field
   41 |     await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
   42 |     await page.getByTestId('passwordInput').click(); // Click the password input field
   43 |     await page.getByTestId('passwordInput').fill('123456'); // Fill the password with 7 characters (minimum is 8)
   44 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
   45 |     const ExpectedText = 'Your password must be at least 8 characters long.';
   46 |     const LocatorText = page.getByText(ExpectedText);
   47 |     await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
   48 | })
   49 |
   50 | test('Register With Birth Date Under 13 Years', async ({ browserName, page }) => {
   51 |     const today = new Date();
   52 |     await page.getByTestId('date').click(); // Click the birth date input field
   53 |     if(browserName.toLowerCase() !== 'webkit')
   54 |     {
   55 |         await page.getByTestId('date').pressSequentially(today.toLocaleDateString('en-us'));
   56 |     }
   57 |     else
   58 |     {
>  59 |         await page.getByTestId('date').fill(today.toLocaleDateString('en-us'));
      |                                        ^ Error: locator.fill: Error: Malformed value
   60 |     }
   61 |     const ExpectedText = 'You must be 13 years of age or older to create an account.';
   62 |     const LocatorText = page.getByText(ExpectedText);
   63 |     await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
   64 | })
   65 |
   66 | test('Register Step 1 Valid', async ({ page }) => {
   67 |     await page.getByTestId('emailInput').click(); // Click the email input field
   68 |     await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
   69 |     await page.getByTestId('passwordInput').click(); // Click the password input field
   70 |     await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
   71 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
   72 |     const Placeholder = await page.getByTestId('handleInput').getAttribute("placeholder"); // Locator is placed on the input box for the handle
   73 |     await expect(Placeholder).toEqual("Type your desired username"); // Find the text dispalyed for step 2
   74 | })
   75 |
   76 | test('Register Step 1 Valid, Step 2 No Value', async ({ page }) => {
   77 |     await page.getByTestId('emailInput').click(); // Click the email input field
   78 |     await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
   79 |     await page.getByTestId('passwordInput').click(); // Click the password input field
   80 |     await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
   81 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to trigger an attempt at registering
   82 |     const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
   83 |     await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without inputting text
   84 | })
   85 |
   86 | test('Register Step 1 Valid, Step 2 Handle Already Taken', async ({ page }) => {
   87 |     await page.getByTestId('emailInput').click(); // Click the email input field
   88 |     await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
   89 |     await page.getByTestId('passwordInput').click(); // Click the password input field
   90 |     await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
   91 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
   92 |     await page.getByTestId('handleInput').fill(BSKY_HANDLE); // Locator is placed on the input box for the handle
   93 |     await page.getByRole('button', {name: 'Next'}).click(); // Click the next button to trigger an attempt at completeing step 2
   94 |     const ExpectedText = 'That handle is already taken.';
   95 |     const LocatorText = page.getByText(ExpectedText);
   96 |     await expect(LocatorText).toHaveText(ExpectedText); // Find the error message and then assert on it
   97 | })
   98 |
   99 | test('Register Step 1 Valid, Step 2 Handle Less Than 3 Characters', async ({ page }) => {
  100 |     await page.getByTestId('emailInput').click(); // Click the email input field
  101 |     await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
  102 |     await page.getByTestId('passwordInput').click(); // Click the password input field
  103 |     await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
  104 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
  105 |     await page.getByTestId('handleInput').fill("12"); // Locator is placed on the input box for the handle
  106 |     const dAttributeValue = await page.locator('path').nth(2).getAttribute("d") // This locator points to the SVG object for "At least 3 characters" requirement
  107 |     await expect(dAttributeValue).toEqual(DID_NOT_MEET_REQUIREMENT_D_VALUE); // Find the error message and then assert on it
  108 |     const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
  109 |     await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without correct handle size
  110 | })
  111 |
  112 | test('Register Step 1 Valid, Step 2 Handle Has Space)', async ({ page }) => {
  113 |     await page.getByTestId('emailInput').click(); // Click the email input field
  114 |     await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
  115 |     await page.getByTestId('passwordInput').click(); // Click the password input field
  116 |     await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
  117 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
  118 |     await page.getByTestId('handleInput').fill("1234 "); // Locator is placed on the input box for the handle
  119 |     const dAttributeValue = await page.locator('path').nth(1).getAttribute("d") // This locator points to the SVG object for "Only contains letters, numbers, and hyphens" requirement
  120 |     await expect(dAttributeValue).toEqual(DID_NOT_MEET_REQUIREMENT_D_VALUE); // Find the error message and then assert on it
  121 |     const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
  122 |     await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without correct handle types
  123 | })
  124 |
  125 | test('Register Step 1 Valid, Step 2 Handle Over 18 Characters)', async ({ page }) => {
  126 |     await page.getByTestId('emailInput').click(); // Click the email input field
  127 |     await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
  128 |     await page.getByTestId('passwordInput').click(); // Click the password input field
  129 |     await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
  130 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
  131 |     await page.getByTestId('handleInput').fill("aaaaaaaaaaaaaaaaaaa"); // Locator is placed on the input box for the handle
  132 |     const dAttributeValue = await page.locator('path').nth(2).getAttribute("d") // This locator points to the SVG object for "No longer than 18 characters" requirement
  133 |     await expect(dAttributeValue).toEqual(DID_NOT_MEET_REQUIREMENT_D_VALUE); // Find the error message and then assert on it
  134 |     const NextButton = await page.getByRole('button', {name: 'Next'})// Click the next button to trigger an attempt at registering
  135 |     await expect(NextButton).not.toBeEnabled(); // Find Next button should not be enabled without correct handle size
  136 | })
  137 |
  138 | test('Register Step 1 Valid, Step 2 Good Handle)', async ({ page }) => {
  139 |     await page.getByTestId('emailInput').click(); // Click the email input field
  140 |     await page.getByTestId('emailInput').fill('test@gmail.com'); // Fill the email field
  141 |     await page.getByTestId('passwordInput').click(); // Click the password input field
  142 |     await page.getByTestId('passwordInput').fill('12345678'); // Fill the password with 8 characters
  143 |     await page.getByRole('button', {name: 'Next'}).click() // Click the next button to complete step 1
  144 |     await page.getByTestId('handleInput').fill(GOOD_HANDLE); // Locator is placed on the input box for the handle
  145 |     await page.getByRole('button', {name: 'Next'}).click(); // Click the next button to trigger an attempt at registering
  146 |     const ExpectedText = "Complete the challenge";
  147 |     const LocatorText = page.getByText(ExpectedText);
  148 |     await expect(LocatorText).toHaveText(ExpectedText); // Expect step 3 which is the captcha challenge
  149 | })
  150 |
```

# Local changes

```diff
diff --git a/.env b/.env
new file mode 100644
index 000000000..3149fd510
--- /dev/null
+++ b/.env
@@ -0,0 +1,3 @@
+# Global Environment variables
+BS_PASSWORD = [add bluesky account password]
+BS_USERNAME = [add bluesky account username]
diff --git a/How To Deploy ReadMe.md b/How To Deploy ReadMe.md
index 6e94084a5..abcf53f8f 100644
--- a/How To Deploy ReadMe.md	
+++ b/How To Deploy ReadMe.md	
@@ -18,20 +18,39 @@
 ***
 
 ### How to run CI/CD Pipeline?
-##### 1. Commit a change to the 'main' branch or create a 'pull request'
+##### [Option 1] Commit a change to the 'main' branch 
+##### [Option 2] Create a 'pull request' to the 'main' branch
+##### [Option 3] Manually re-run any of the 'Playwright Test' previously executed within the 'Actions' section
 
 ***
 
 ## How to run Locally (without CI/CD Pipeline)?
 #### Prerequisites:
-###### 1. Ensure VS Code (v1.97.1 or later) is installed on your local machine 
-###### 2. Git clone this repo
-###### 3. Open the clone repo project within VS Code
-###### 4. Within VS Code Extensions, install the 'Playwright Test for VSCode by Microsoft" (v1.1.13 or later)
-###### 5. Enable the plugin once installed
-###### 6. Open terminal within VSCode and run "yarn" to install dependencies
-###### 7. Run "yarn web" to start local server instance and note the localhost url plus port being used to run the application
-###### 8. Open the playwright.config.ts file and set the webserver url attribute to equal the url indicated in Step 7 (in most cases it will run on http://127.0.0.1:19006)
-###### 9. Save changes within the playwright.config.ts file
-###### 10. Open another terminal instance, and run the following cmd: npx playwright test
-###### 11. [Optional] you can run the tests with parallelization by adding '--workers=3' 
+###### 1. Ensure VS Code (v1.97.1 or later) is installed on your local machine (https://code.visualstudio.com/download)
+###### 2. Ensure Node (v20 or later) is installed on your local machine (https://nodejs.org/en/download)
+###### -- run node -v (verify installation success)
+###### 3. Ensure yarn (v1.22.22) is installed on your local machine (https://classic.yarnpkg.com/lang/en/docs/install/)
+###### -- run npm install --global yarn
+###### -- run yarn --version (verify installation success)
+###### 4. Ensure npm Dotenv is installed (https://www.npmjs.com/package/dotenv)
+
+#### Setup Project:
+###### 1. Git clone this repo
+###### 2. Open the clone repo project within VS Code
+###### 3. Within the root of cloned project, navigate to the .env file and add your bluesky account password to the BS_PASSWORD variable and bluesky username to the BS_USERNAME variable and save the file
+
+###### 4. Navigate to each test file within the \_\_tests\_\_/lib/Playwright directory and change the following: 
+###### 'const BSKY_EMAIL = process.env.SECRET_USR;' to 'const BSKY_EMAIL = process.env.BS_USERNAME;'
+###### 'const BSKY_PASS = process.env.SECRET_PWD;' to 'const BSKY_PASS = process.env.BS_PASSWORD;'
+
+###### and add "import dotenv from 'dotenv';" to the top of the .ts files (all of them).
+
+###### 5. Save the files
+
+#### Run the Tests:
+###### 1. Open terminal within VSCode and run "yarn" to install dependencies
+###### 2. Run "yarn web" to start local server instance and note the localhost url plus port being used to run the application (this takes several minutes)
+###### 3. Open the playwright.config.ts file and set the webserver url attribute to equal the url indicated in Step 2 (in most cases it will run on http://127.0.0.1:19006)
+###### 4. Save changes within the playwright.config.ts file
+###### 5. Open another terminal instance, and run the following cmd: npx playwright test
+###### 6. [Optional] you can run the tests with parallelization by adding '--workers=3' 
\ No newline at end of file
```